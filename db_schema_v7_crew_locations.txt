-- 데이터베이스 스키마 V7 (attendance 스키마, 크루별 모임 장소 추가)

-- UUID 확장을 활성화합니다.
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- attendance 스키마 생성
CREATE SCHEMA IF NOT EXISTS attendance;

-- 등급 테이블 (전역 등급 식별자 정의)
CREATE TABLE attendance.grades (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL -- 전역 등급 이름 (예: NEW, BRONZE, SILVER, GOLD, BLACK)
);
COMMENT ON TABLE attendance.grades IS '전역 등급 식별자를 정의하는 테이블 (예: 브론즈, 실버 등)';
INSERT INTO attendance.grades (name) VALUES ('NEW'), ('BRONZE'), ('SILVER'), ('GOLD'), ('BLACK');

-- 권한 테이블 (전역 권한)
CREATE TABLE attendance.roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL -- 권한 이름 (예: MASTER_ADMIN, ADMIN, USER)
);
COMMENT ON TABLE attendance.roles IS '전역 사용자 역할(권한)을 정의하는 테이블';
INSERT INTO attendance.roles (name) VALUES ('MASTER_ADMIN'), ('ADMIN'), ('USER');

-- 운동 종류 테이블 (전역 정의)
CREATE TABLE attendance.exercise_types (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL -- 운동 종류 이름 (예: 러닝, 등산, 자전거, 기타)
);
COMMENT ON TABLE attendance.exercise_types IS '모든 운동 종류를 정의하는 테이블';
INSERT INTO attendance.exercise_types (name) VALUES ('러닝'), ('등산'), ('자전거'), ('기타');

-- 사용자 테이블
CREATE TABLE attendance.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    first_name VARCHAR(50) NOT NULL,
    birth_year INTEGER,
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(20) UNIQUE,
    hashed_password TEXT,
    profile_image_url TEXT,
    oauth_provider VARCHAR(50),
    oauth_id VARCHAR(255),
    join_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (oauth_provider, oauth_id)
);
COMMENT ON TABLE attendance.users IS '애플리케이션 사용자 정보를 저장하는 테이블';
-- ... (컬럼 주석 유지) ...

-- 크루 테이블
CREATE TABLE attendance.crews (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    profile_image_url TEXT,
    created_by UUID REFERENCES attendance.users(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE attendance.crews IS '러닝 크루 정보를 저장하는 테이블';
-- ... (컬럼 주석 유지) ...

-- 크루별 모임 장소 테이블 (신규)
CREATE TABLE attendance.crew_locations (
    id SERIAL PRIMARY KEY, -- 모임 장소 고유 ID
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL, -- 장소 이름 (예: 올림픽공원 평화의 문)
    description TEXT, -- 장소 상세 설명 (선택 사항)
    latitude DECIMAL(9, 6), -- 위도 (소수점 6자리까지)
    longitude DECIMAL(9, 6), -- 경도 (소수점 6자리까지)
    is_active BOOLEAN NOT NULL DEFAULT TRUE, -- 크루에서 현재 사용하는 장소인지 여부
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (crew_id, name) -- 한 크루 내에서 장소 이름은 고유해야 함
);
COMMENT ON TABLE attendance.crew_locations IS '크루별 모임 장소 정보를 관리하는 테이블';
COMMENT ON COLUMN attendance.crew_locations.id IS '모임 장소 고유 ID';
COMMENT ON COLUMN attendance.crew_locations.crew_id IS '해당 장소를 소유한 크루 ID';
COMMENT ON COLUMN attendance.crew_locations.name IS '모임 장소 이름';
COMMENT ON COLUMN attendance.crew_locations.description IS '모임 장소에 대한 추가 설명';
COMMENT ON COLUMN attendance.crew_locations.latitude IS '위도 좌표';
COMMENT ON COLUMN attendance.crew_locations.longitude IS '경도 좌표';
COMMENT ON COLUMN attendance.crew_locations.is_active IS '이 장소가 현재 크루 모임 장소로 사용 가능한지 여부';
COMMENT ON COLUMN attendance.crew_locations.created_at IS '레코드 생성 일시';
COMMENT ON COLUMN attendance.crew_locations.updated_at IS '레코드 마지막 수정 일시';

-- 크루별 등급 설정 테이블
CREATE TABLE attendance.crew_grades (
    id SERIAL PRIMARY KEY,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    grade_id INTEGER NOT NULL REFERENCES attendance.grades(id) ON DELETE RESTRICT,
    name_override VARCHAR(50),
    description_override TEXT,
    min_score INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (crew_id, grade_id)
);
COMMENT ON TABLE attendance.crew_grades IS '크루별로 적용되는 등급의 상세 설정(이름, 기준 등)을 정의하는 테이블';
-- ... (컬럼 주석 유지) ...

-- 크루-운동 종류 매핑 테이블
CREATE TABLE attendance.crew_exercise_types (
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    exercise_type_id INTEGER NOT NULL REFERENCES attendance.exercise_types(id) ON DELETE CASCADE,
    PRIMARY KEY (crew_id, exercise_type_id)
);
COMMENT ON TABLE attendance.crew_exercise_types IS '각 크루가 허용하는 운동 종류를 정의하는 매핑 테이블';
-- ... (컬럼 주석 유지) ...

-- 사용자-권한 매핑 테이블 (전역 권한)
CREATE TABLE attendance.user_roles (
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    role_id INTEGER NOT NULL REFERENCES attendance.roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);
COMMENT ON TABLE attendance.user_roles IS '사용자와 전역 역할(권한) 간의 관계를 정의하는 매핑 테이블';
-- ... (컬럼 주석 유지) ...

-- 사용자-크루 매핑 테이블
CREATE TABLE attendance.user_crews (
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    crew_grade_id INTEGER REFERENCES attendance.crew_grades(id) ON DELETE SET NULL,
    crew_role VARCHAR(50) DEFAULT 'MEMBER',
    joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, crew_id)
);
COMMENT ON TABLE attendance.user_crews IS '사용자와 크루 간의 소속 관계, 크루 내 역할 및 등급을 정의';
-- ... (컬럼 주석 유지) ...

-- 출석 기록 테이블 (location 컬럼 유지)
CREATE TABLE attendance.attendance_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    attendance_timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    location TEXT, -- 실제 출석이 이루어진 장소 (자유 텍스트)
    exercise_type_id INTEGER NOT NULL REFERENCES attendance.exercise_types(id),
    is_host BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_attendance_exercise_type FOREIGN KEY (exercise_type_id) REFERENCES attendance.exercise_types(id)
);
COMMENT ON TABLE attendance.attendance_records IS '사용자 출석 기록을 저장하는 테이블';
COMMENT ON COLUMN attendance.attendance_records.location IS '실제 출석이 이루어진 장소 (자유 텍스트 형식)';
-- ... (다른 컬럼 주석 유지) ...

-- 공지사항 테이블
CREATE TABLE attendance.notices (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    crew_id UUID REFERENCES attendance.crews(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    display_start_at TIMESTAMPTZ,
    display_end_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE attendance.notices IS '공지사항 내용을 관리하는 테이블';
-- ... (컬럼 주석 유지) ...

-- 테이블 수정 시 updated_at 자동 업데이트를 위한 트리거 함수
CREATE OR REPLACE FUNCTION attendance.trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 트리거 적용 (users, notices, crews, crew_grades, crew_locations)
CREATE TRIGGER set_timestamp_users
BEFORE UPDATE ON attendance.users
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp();

CREATE TRIGGER set_timestamp_notices
BEFORE UPDATE ON attendance.notices
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp();

CREATE TRIGGER set_timestamp_crews
BEFORE UPDATE ON attendance.crews
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp();

CREATE TRIGGER set_timestamp_crew_grades
BEFORE UPDATE ON attendance.crew_grades
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp();

-- 신규: crew_locations 테이블에도 트리거 적용
CREATE TRIGGER set_timestamp_crew_locations
BEFORE UPDATE ON attendance.crew_locations
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp(); 