-- 데이터베이스 스키마 V5 (attendance 스키마)

-- UUID 확장을 활성화합니다. (설치되어 있지 않다면 설치 필요 - 보통 public에 설치됨)
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- attendance 스키마 생성
CREATE SCHEMA IF NOT EXISTS attendance;

-- 등급 테이블
CREATE TABLE attendance.grades (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL, -- 등급 이름 (예: Black, Gold, New)
    description TEXT, -- 등급 설명
    min_score INTEGER DEFAULT 0, -- 등급 달성 최소 점수/조건
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE attendance.grades IS '사용자 등급 정보를 정의하는 테이블';
INSERT INTO attendance.grades (name, description) VALUES ('Beginer', '신규 가입 회원'), ('Bronze', '기본 활동 회원'), ('Silver', '중급 활동 회원'), ('Gold', '고급 활동 회원'), ('Black', '최상위 활동 회원');

commit;

-- 권한 테이블 (전역 권한)
CREATE TABLE attendance.roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL -- 권한 이름 (예: MASTER_ADMIN, ADMIN, USER)
);
COMMENT ON TABLE attendance.roles IS '전역 사용자 역할(권한)을 정의하는 테이블';
INSERT INTO attendance.roles (name) VALUES ('MASTER_ADMIN'), ('ADMIN'), ('USER');

-- 운동 종류 테이블 (전역 정의)
CREATE TABLE attendance.exercise_types (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL -- 운동 종류 이름 (예: 러닝, 등산, 자전거, 기타)
);
COMMENT ON TABLE attendance.exercise_types IS '모든 운동 종류를 정의하는 테이블';
INSERT INTO attendance.exercise_types (name) VALUES ('러닝'), ('등산'), ('자전거'), ('기타');

-- 사용자 테이블
-- 참고: users 테이블은 attendance 스키마가 아닌 public 스키마에 두는 것이 더 일반적일 수 있습니다.
--      하지만 요청에 따라 attendance 스키마에 생성합니다.
CREATE TABLE attendance.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    first_name VARCHAR(50) NOT NULL, -- 이름
    birth_year INTEGER, -- 출생 연도
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(20) UNIQUE,
    hashed_password TEXT,
    profile_image_url TEXT,
    oauth_provider VARCHAR(50),
    oauth_id VARCHAR(255),
    join_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (oauth_provider, oauth_id)
);
COMMENT ON TABLE attendance.users IS '애플리케이션 사용자 정보를 저장하는 테이블';
COMMENT ON COLUMN attendance.users.id IS '사용자 고유 ID (UUID)';
COMMENT ON COLUMN attendance.users.first_name IS '사용자 이름';
COMMENT ON COLUMN attendance.users.birth_year IS '사용자 출생 연도';
COMMENT ON COLUMN attendance.users.email IS '사용자 이메일 주소 (NULL 가능)';
COMMENT ON COLUMN attendance.users.phone IS '사용자 연락처 (선택 사항, 고유값)';
COMMENT ON COLUMN attendance.users.hashed_password IS '해싱된 사용자 비밀번호 (NULL 가능)';
COMMENT ON COLUMN attendance.users.profile_image_url IS '프로필 이미지 URL';
COMMENT ON COLUMN attendance.users.oauth_provider IS 'OAuth 인증 제공자 이름 (예: kakao)';
COMMENT ON COLUMN attendance.users.oauth_id IS 'OAuth 제공자 시스템에서의 사용자 고유 ID';
COMMENT ON COLUMN attendance.users.join_date IS '가입 일시';
COMMENT ON COLUMN attendance.users.created_at IS '레코드 생성 일시';
COMMENT ON COLUMN attendance.users.updated_at IS '레코드 마지막 수정 일시';

-- 크루 테이블
CREATE TABLE attendance.crews (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) UNIQUE NOT NULL, -- 크루 이름
    description TEXT, -- 크루 설명
    profile_image_url TEXT, -- 크루 대표 이미지
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE attendance.crews IS '러닝 크루 정보를 저장하는 테이블';
COMMENT ON COLUMN attendance.crews.id IS '크루 고유 ID (UUID)';
COMMENT ON COLUMN attendance.crews.name IS '크루 이름';
COMMENT ON COLUMN attendance.crews.description IS '크루 상세 설명';
COMMENT ON COLUMN attendance.crews.profile_image_url IS '크루 대표 프로필 이미지 URL';
COMMENT ON COLUMN attendance.crews.created_at IS '레코드 생성 일시';
COMMENT ON COLUMN attendance.crews.updated_at IS '레코드 마지막 수정 일시';

-- 크루-운동 종류 매핑 테이블 (다대다 관계)
CREATE TABLE attendance.crew_exercise_types (
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    exercise_type_id INTEGER NOT NULL REFERENCES attendance.exercise_types(id) ON DELETE CASCADE,
    PRIMARY KEY (crew_id, exercise_type_id) -- 크루와 운동 종류 조합은 유일해야 함
);
COMMENT ON TABLE attendance.crew_exercise_types IS '각 크루가 허용하는 운동 종류를 정의하는 매핑 테이블';
COMMENT ON COLUMN attendance.crew_exercise_types.crew_id IS '크루 ID (attendance.crews 테이블 참조)';
COMMENT ON COLUMN attendance.crew_exercise_types.exercise_type_id IS '운동 종류 ID (attendance.exercise_types 테이블 참조)';

-- 사용자-권한 매핑 테이블 (전역 권한)
CREATE TABLE attendance.user_roles (
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    role_id INTEGER NOT NULL REFERENCES attendance.roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);
COMMENT ON TABLE attendance.user_roles IS '사용자와 전역 역할(권한) 간의 관계를 정의하는 매핑 테이블';
COMMENT ON COLUMN attendance.user_roles.user_id IS '사용자 ID (attendance.users 테이블 참조)';
COMMENT ON COLUMN attendance.user_roles.role_id IS '권한 ID (attendance.roles 테이블 참조)';

-- 사용자-크루 매핑 테이블 (소속 및 크루 내 역할)
CREATE TABLE attendance.user_crews (
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    crew_role VARCHAR(50) DEFAULT 'MEMBER', -- 크루 내 역할 (예: LEADER, ADMIN, MEMBER)
    joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, crew_id)
);
COMMENT ON TABLE attendance.user_crews IS '사용자와 크루 간의 소속 관계 및 크루 내 역할을 정의';
COMMENT ON COLUMN attendance.user_crews.user_id IS '사용자 ID (attendance.users 테이블 참조)';
COMMENT ON COLUMN attendance.user_crews.crew_id IS '크루 ID (attendance.crews 테이블 참조)';
COMMENT ON COLUMN attendance.user_crews.crew_role IS '해당 크루 내에서의 사용자 역할';
COMMENT ON COLUMN attendance.user_crews.joined_at IS '크루 가입 일시';

-- 출석 기록 테이블
CREATE TABLE attendance.attendance_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    attendance_timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    location TEXT,
    exercise_type_id INTEGER NOT NULL REFERENCES attendance.exercise_types(id),
    is_host BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_attendance_exercise_type FOREIGN KEY (exercise_type_id) REFERENCES attendance.exercise_types(id)
);
COMMENT ON TABLE attendance.attendance_records IS '사용자 출석 기록을 저장하는 테이블';
COMMENT ON COLUMN attendance.attendance_records.id IS '출석 기록 고유 ID (UUID)';
COMMENT ON COLUMN attendance.attendance_records.user_id IS '사용자 ID (attendance.users 테이블 참조)';
COMMENT ON COLUMN attendance.attendance_records.crew_id IS '관련된 크루 ID (attendance.crews 테이블 참조)';
COMMENT ON COLUMN attendance.attendance_records.attendance_timestamp IS '출석한 시간';
COMMENT ON COLUMN attendance.attendance_records.location IS '출석 장소 (텍스트)';
COMMENT ON COLUMN attendance.attendance_records.exercise_type_id IS '수행한 운동 종류 ID (attendance.exercise_types 테이블 참조)';
COMMENT ON COLUMN attendance.attendance_records.is_host IS '모임 개설자(벙주) 여부';
COMMENT ON COLUMN attendance.attendance_records.created_at IS '레코드 생성 일시';

-- 공지사항 테이블
CREATE TABLE attendance.notices (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    crew_id UUID REFERENCES attendance.crews(id) ON DELETE CASCADE, -- NULL이면 전체 공지
    content TEXT NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    display_start_at TIMESTAMPTZ,
    display_end_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE attendance.notices IS '공지사항 내용을 관리하는 테이블';
COMMENT ON COLUMN attendance.notices.id IS '공지사항 고유 ID (UUID)';
COMMENT ON COLUMN attendance.notices.crew_id IS '공지가 적용될 크루 ID (NULL이면 전체 공지, attendance.crews 참조)';
COMMENT ON COLUMN attendance.notices.content IS '공지 내용';
COMMENT ON COLUMN attendance.notices.is_active IS '현재 공지가 활성화되어 있는지 여부';
COMMENT ON COLUMN attendance.notices.display_start_at IS '공지 게시 시작 시간 (NULL이면 즉시 게시)';
COMMENT ON COLUMN attendance.notices.display_end_at IS '공지 게시 종료 시간 (NULL이면 무기한 게시)';
COMMENT ON COLUMN attendance.notices.created_at IS '레코드 생성 일시';
COMMENT ON COLUMN attendance.notices.updated_at IS '레코드 마지막 수정 일시';

-- 테이블 수정 시 updated_at 자동 업데이트를 위한 트리거 함수
CREATE OR REPLACE FUNCTION attendance.trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 트리거 적용 (users, notices, crews)
CREATE TRIGGER set_timestamp_users
BEFORE UPDATE ON attendance.users
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp();

CREATE TRIGGER set_timestamp_notices
BEFORE UPDATE ON attendance.notices
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp();

CREATE TRIGGER set_timestamp_crews
BEFORE UPDATE ON attendance.crews
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp(); 



-- 크루별 등급 설정 테이블 (신규)
CREATE TABLE attendance.crew_grades (
    id SERIAL PRIMARY KEY, -- 각 크루별 등급 설정의 고유 ID
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    grade_id INTEGER NOT NULL REFERENCES attendance.grades(id) ON DELETE RESTRICT, -- 전역 등급 ID
    name_override VARCHAR(50), -- 크루별 등급 이름 (NULL이면 grades.name 사용)
    description_override TEXT, -- 크루별 등급 설명 (NULL이면 기본 설명 사용)
    min_score INTEGER NOT NULL DEFAULT 0, -- 이 등급 달성을 위한 크루별 최소 점수/조건
    is_active BOOLEAN NOT NULL DEFAULT TRUE, -- 이 크루에서 해당 등급을 사용하는지 여부
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (crew_id, grade_id) -- 한 크루 내에서 동일한 전역 등급은 한 번만 정의됨
);
COMMENT ON TABLE attendance.crew_grades IS '크루별로 적용되는 등급의 상세 설정(이름, 기준 등)을 정의하는 테이블';
COMMENT ON COLUMN attendance.crew_grades.id IS '크루 등급 설정 고유 ID';
COMMENT ON COLUMN attendance.crew_grades.crew_id IS '해당 등급 설정을 소유한 크루 ID';
COMMENT ON COLUMN attendance.crew_grades.grade_id IS '참조하는 전역 등급 ID (예: BRONZE, SILVER)';
COMMENT ON COLUMN attendance.crew_grades.name_override IS '크루 내에서 보여줄 등급 이름 (선택 사항)';
COMMENT ON COLUMN attendance.crew_grades.description_override IS '크루 내 등급 설명 (선택 사항)';
COMMENT ON COLUMN attendance.crew_grades.min_score IS '해당 등급 달성을 위한 크루별 최소 점수/조건';
COMMENT ON COLUMN attendance.crew_grades.is_active IS '이 등급이 현재 크루에서 활성화/사용 가능한지 여부';
COMMENT ON COLUMN attendance.crew_grades.created_at IS '레코드 생성 일시';
COMMENT ON COLUMN attendance.crew_grades.updated_at IS '레코드 마지막 수정 일시';


commit;


-- 사용자-크루 매핑 테이블 (소속, 크루 내 역할, 크루 내 등급)
CREATE TABLE attendance.user_crews (
    user_id UUID NOT NULL REFERENCES attendance.users(id) ON DELETE CASCADE,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    crew_grade_id INTEGER REFERENCES attendance.crew_grades(id) ON DELETE SET NULL, -- 크루 내 등급 ID (crew_grades 참조)
    crew_role VARCHAR(50) DEFAULT 'MEMBER', -- 크루 내 역할 (예: LEADER, ADMIN, MEMBER)
    joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, crew_id)
);
COMMENT ON TABLE attendance.user_crews IS '사용자와 크루 간의 소속 관계, 크루 내 역할 및 등급을 정의';
COMMENT ON COLUMN attendance.user_crews.user_id IS '사용자 ID';
COMMENT ON COLUMN attendance.user_crews.crew_id IS '크루 ID';
COMMENT ON COLUMN attendance.user_crews.crew_grade_id IS '사용자의 해당 크루 내 등급 ID (attendance.crew_grades 참조)';
COMMENT ON COLUMN attendance.user_crews.crew_role IS '해당 크루 내에서의 사용자 역할';
COMMENT ON COLUMN attendance.user_crews.joined_at IS '크루 가입 일시';

commit;u




-- 크루별 모임 장소 테이블 (신규)
CREATE TABLE attendance.crew_locations (
    id SERIAL PRIMARY KEY, -- 모임 장소 고유 ID
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL, -- 장소 이름 (예: 올림픽공원 평화의 문)
    description TEXT, -- 장소 상세 설명 (선택 사항)
    latitude DECIMAL(9, 6), -- 위도 (소수점 6자리까지)
    longitude DECIMAL(9, 6), -- 경도 (소수점 6자리까지)
    is_active BOOLEAN NOT NULL DEFAULT TRUE, -- 크루에서 현재 사용하는 장소인지 여부
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (crew_id, name) -- 한 크루 내에서 장소 이름은 고유해야 함
);
COMMENT ON TABLE attendance.crew_locations IS '크루별 모임 장소 정보를 관리하는 테이블';
COMMENT ON COLUMN attendance.crew_locations.id IS '모임 장소 고유 ID';
COMMENT ON COLUMN attendance.crew_locations.crew_id IS '해당 장소를 소유한 크루 ID';
COMMENT ON COLUMN attendance.crew_locations.name IS '모임 장소 이름';
COMMENT ON COLUMN attendance.crew_locations.description IS '모임 장소에 대한 추가 설명';
COMMENT ON COLUMN attendance.crew_locations.latitude IS '위도 좌표';
COMMENT ON COLUMN attendance.crew_locations.longitude IS '경도 좌표';
COMMENT ON COLUMN attendance.crew_locations.is_active IS '이 장소가 현재 크루 모임 장소로 사용 가능한지 여부';
COMMENT ON COLUMN attendance.crew_locations.created_at IS '레코드 생성 일시';
COMMENT ON COLUMN attendance.crew_locations.updated_at IS '레코드 마지막 수정 일시';


CREATE TRIGGER set_timestamp_crew_locations
BEFORE UPDATE ON attendance.crew_locations
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp(); 




-- 크루 초대 코드 시스템을 위한 데이터베이스 DDL

-- 크루 초대 코드 테이블 생성
CREATE TABLE attendance.crew_invite_codes (
    id SERIAL PRIMARY KEY,
    crew_id UUID NOT NULL REFERENCES attendance.crews(id) ON DELETE CASCADE,
    invite_code VARCHAR(7) NOT NULL,  -- 7자리 영어 대소문자 조합 초대 코드
    description TEXT,                 -- 코드 설명 (선택 사항)
    is_active BOOLEAN NOT NULL DEFAULT TRUE,  -- 코드 활성 상태
    max_uses INTEGER,                 -- 최대 사용 횟수 (NULL인 경우 무제한)
    used_count INTEGER NOT NULL DEFAULT 0,  -- 현재까지 사용된 횟수
    expires_at TIMESTAMPTZ,           -- 만료 시간 (NULL인 경우 만료되지 않음)
    created_by UUID REFERENCES attendance.users(id) ON DELETE SET NULL,  -- 코드 생성자
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_invite_code UNIQUE (invite_code)  -- 초대 코드는 전체 시스템에서 고유해야 함
);
COMMENT ON TABLE attendance.crew_invite_codes IS '크루 초대를 위한 인증 코드를 관리하는 테이블';
COMMENT ON COLUMN attendance.crew_invite_codes.id IS '초대 코드 고유 ID';
COMMENT ON COLUMN attendance.crew_invite_codes.crew_id IS '이 코드가 연결된 크루 ID';
COMMENT ON COLUMN attendance.crew_invite_codes.invite_code IS '7자리 영어 대소문자 조합의 고유 초대 코드';
COMMENT ON COLUMN attendance.crew_invite_codes.description IS '코드 용도나 메모를 위한 설명';
COMMENT ON COLUMN attendance.crew_invite_codes.is_active IS '이 코드가 현재 활성화 상태인지 여부';
COMMENT ON COLUMN attendance.crew_invite_codes.max_uses IS '이 코드의 최대 사용 가능 횟수 (NULL인 경우 무제한)';
COMMENT ON COLUMN attendance.crew_invite_codes.used_count IS '이 코드가 사용된 횟수';
COMMENT ON COLUMN attendance.crew_invite_codes.expires_at IS '코드 만료 일시 (NULL인 경우 만료되지 않음)';
COMMENT ON COLUMN attendance.crew_invite_codes.created_by IS '이 코드를 생성한 사용자 ID';
COMMENT ON COLUMN attendance.crew_invite_codes.created_at IS '코드 생성 일시';
COMMENT ON COLUMN attendance.crew_invite_codes.updated_at IS '코드 마지막 수정 일시';

-- 사용자 테이블에 크루 인증 여부 칼럼 추가
ALTER TABLE attendance.users
ADD COLUMN verified_crew_id UUID REFERENCES attendance.crews(id) ON DELETE SET NULL,
ADD COLUMN is_crew_verified BOOLEAN NOT NULL DEFAULT FALSE;

COMMENT ON COLUMN attendance.users.verified_crew_id IS '사용자가 인증된 크루 ID';
COMMENT ON COLUMN attendance.users.is_crew_verified IS '사용자가 크루 소속으로 인증되었는지 여부';

-- 초대 코드 사용 이력 테이블 (감사 및 모니터링 목적)
CREATE TABLE attendance.invite_code_usage_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    invite_code_id INTEGER NOT NULL REFERENCES attendance.crew_invite_codes(id),
    user_id UUID NOT NULL REFERENCES attendance.users(id),
    used_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    user_ip VARCHAR(45),  -- IPv6도 지원하기 위해 45자 사용
    user_agent TEXT       -- 브라우저/기기 정보
);
COMMENT ON TABLE attendance.invite_code_usage_logs IS '초대 코드 사용 이력을 추적하는 테이블';
COMMENT ON COLUMN attendance.invite_code_usage_logs.id IS '사용 로그 고유 ID';
COMMENT ON COLUMN attendance.invite_code_usage_logs.invite_code_id IS '사용된 초대 코드 ID';
COMMENT ON COLUMN attendance.invite_code_usage_logs.user_id IS '코드를 사용한 사용자 ID';
COMMENT ON COLUMN attendance.invite_code_usage_logs.used_at IS '코드 사용 일시';
COMMENT ON COLUMN attendance.invite_code_usage_logs.user_ip IS '코드 사용 시 사용자 IP 주소';
COMMENT ON COLUMN attendance.invite_code_usage_logs.user_agent IS '코드 사용 시 사용자 브라우저/기기 정보';

-- 트리거 설정: 사용 시 사용 횟수 증가
CREATE OR REPLACE FUNCTION attendance.update_invite_code_usage()
RETURNS TRIGGER AS $$
BEGIN
  -- 사용 횟수 증가
  UPDATE attendance.crew_invite_codes
  SET used_count = used_count + 1
  WHERE id = NEW.invite_code_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_code_usage
AFTER INSERT ON attendance.invite_code_usage_logs
FOR EACH ROW
EXECUTE FUNCTION attendance.update_invite_code_usage();

-- 트리거 적용 (crew_invite_codes)
CREATE TRIGGER set_timestamp_crew_invite_codes
BEFORE UPDATE ON attendance.crew_invite_codes
FOR EACH ROW
EXECUTE FUNCTION attendance.trigger_set_timestamp(); 